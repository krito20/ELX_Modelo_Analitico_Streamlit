# -*- coding: utf-8 -*-
"""ClaseGraficas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B_-M_5QbVByC1qa72FzEZqfLNCvprzyD
"""

# Leonar Santiago Castro Vizcaya 
# Emergia 2023
# 15/03/2023

class Visuals():
  """
  Clase para Histograma unica Variable (por el momento) 
  """
  def __init__(self,df):
    self.df = df

  def ValidarCampos(self):
    lista_campos = ['RangoConsumo','RangodeCompra($)','RangoRecurrenciaCompra','ClusterComprados',
                'TipoCliente#Oportunidades','TipoCliente$Oportunidades','CategorizacionSectores',
                'ESTATUSOPERACIONAL','TamanoEmpresa','CategoriaDepartamento']
    for campo in lista_campos:
      if campo in df.columns.to_list():
        pass
      else: 
            print('El campo ', '"'+campo+'"', ' no se encuentra en el archivo cargado, por favor valide que el archivo contenga el campo ', '"'+campo+'"')
  
  # def Validar_categorias_por_campo(self):
  #   cat_rango

def Graficar(variable ):
  # variable 
  mpl.rcParams['font.size'] = 12
  mpl.rcParams['font.family'] = 'sans-serif'
  color = '#461e7d'
  df_f = df.copy()
  df_f[variable].fillna('Sin Catalogar', inplace=True)

  orden = ['Sin Catalogar', 'Menor a 5000', 'Entre 5000 y 10000', 'Entre 10000 y 55000', 'Mayor a 55000']

  values = df_f[variable].value_counts().keys().to_list()
  n_barras = len(values)
  
  plt.figure(figsize = (7,5))

  #total = df_f.count(axis=1)
  #fig = plt.barh(total.index, total)
  #plt.show()
  
  ax = sns.countplot(y=variable, order = orden, data=df_f, color = color #[(70/255,30/255,125/255)]
                    , orient = 'h')#, hue = 'Tipo de usuario', hue_order=df["Tipo de usuario"].value_counts().keys().tolist())

  for i in range(n_barras):
    p = ax.patches[i]
    total = len(df_f) 
    
    ax.annotate(format(p.get_width(), '.0f') + ' ('+format(p.get_width()/total*100, '.2f')+' %)', 
                (p.get_width(), p.get_y() + p.get_height()), # (p.get_x() + p.get_width() / 2., p.get_height())
                ha='center', va='center',
                xytext=(50, 20),
                textcoords='offset points')


  ax.spines['top'].set_visible(False)
  ax.spines['right'].set_visible(False)
  ax.spines['bottom'].set_visible(False)
  ax.spines['left'].set_visible(False)

  plt.xticks([])
  # plt.axis('off')
  plt.title('')
  plt.xlabel('Cantidad de Registros')
  
  if variable == 'RangoConsumo':
    plt.ylabel('Rango de Consumo')

  plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib as mpl

sheet_name = 'Data'
path = './Ejemplo_prueba_cartera.xlsx'
df = pd.read_excel(path, sheet_name= sheet_name)

ob = Visuals(df)
ob.ValidarCampos()
Graficar('RangoConsumo')

